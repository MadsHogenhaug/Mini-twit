name: Continuous Deployment Docker Swarm test

on:
  push:
    branches: ["docker-swarm"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run cp_shrd.sh
        run: bash cp_shrd.sh

      - name: Set up Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y unzip
          curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
          unzip /tmp/terraform.zip -d /usr/local/bin/
          terraform -version

      - name: Terraform Init
        env:
          TF_VAR_do_token: ${{ secrets.TF_VAR_DO_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SPACE_NAME: ${{ secrets.SPACE_NAME }}
          STATE_FILE: ${{ secrets.STATE_FILE }}
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ secrets.SPACE_NAME }}" \
            -backend-config="key=${{ secrets.STATE_FILE }}" \
            -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Apply
        env:
          TF_VAR_do_token: ${{ secrets.TF_VAR_DO_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Get Swarm Leader IP
        id: tf-output
        run: |
          cd terraform
          export SWARM_LEADER_IP=$(terraform output -raw minitwit-swarm-leader-ip-address)
          echo "SWARM_LEADER_IP=$SWARM_LEADER_IP" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Minitwit
        uses: docker/build-push-action@v2
        with:
          context: ./app
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/itu-minitwit:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/itu-minitwit:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/itu-minitwit:webbuildcache,mode=max

      - name: Build and push Minitwit API
        uses: docker/build-push-action@v2
        with:
          context: ./API
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/itu-minitwit-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/itu-minitwit-api:apibuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/itu-minitwit-api:apibuildcache,mode=max

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SWARM_LEADER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script_stop: true
          command_timeout: 200m
          script: |
            docker swarm init --advertise-addr ${{ env.SWARM_LEADER_IP }} || true
            docker node update --availability active $(hostname)
            docker service create --name minitwit --replicas 1 --publish published=80,target=80 --constraint 'node.role == manager' --with-registry-auth --detach=true ${{ secrets.DOCKER_USERNAME }}/itu-minitwit:latest
            docker service create --name minitwit-api --replicas 1 --publish published=5001,target=5001 --constraint 'node.role == manager' --with-registry-auth --detach=true ${{ secrets.DOCKER_USERNAME }}/itu-minitwit-api:latest
