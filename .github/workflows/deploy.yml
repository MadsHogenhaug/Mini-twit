name: Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run cp_shrd.sh
        run: bash cp_shrd.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Minitwit
        uses: docker/build-push-action@v2
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit:webbuildcache,mode=max

      - name: Build and push Minitwit API
        uses: docker/build-push-action@v2
        with:
          context: ./API
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-api:apibuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-api:apibuildcache,mode=max

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.0  # Replace with the version you need

      - name: Copy secrets structure
        run: cp -r secrets_template secrets

      - name: Export environment variables
        run: |
          echo "export TF_VAR_do_token=${{ secrets.TF_VAR_DO_TOKEN }}" >> $GITHUB_ENV
          echo "export SPACE_NAME=${{ secrets.SPACE_NAME }}" >> $GITHUB_ENV
          echo "export STATE_FILE=${{ secrets.STATE_FILE }}" >> $GITHUB_ENV
          echo "export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: Bootstrap terraform and push app
        run: |
          echo -e "\n--> Loading environment variables from secrets file\n"
          source secrets/tf_secrets
          echo -e "\n--> Checking that environment variables are set\n"
          # check that all variables are set
          [ -z "$TF_VAR_do_token" ] && echo "TF_VAR_do_token is not set" && exit
          [ -z "$SPACE_NAME" ] && echo "SPACE_NAME is not set" && exit
          [ -z "$STATE_FILE" ] && echo "STATE_FILE is not set" && exit
          [ -z "$AWS_ACCESS_KEY_ID" ] && echo "AWS_ACCESS_KEY_ID is not set" && exit
          [ -z "$AWS_SECRET_ACCESS_KEY" ] && echo "AWS_SECRET_ACCESS_KEY is not set" && exit

          echo -e "\n--> Initializing terraform\n"
          # initialize terraform
          terraform -chdir=./terraform init \
              -backend-config "bucket=$SPACE_NAME" \
              -backend-config "key=$STATE_FILE" \
              -backend-config "access_key=$AWS_ACCESS_KEY_ID" \
              -backend-config "secret_key=$AWS_SECRET_ACCESS_KEY"

          # check that everything looks good
          echo -e "\n--> Validating terraform configuration\n"
          terraform -chdir=./terraform validate

          # create infrastructure
          echo -e "\n--> Creating Infrastructure\n"
          terraform -chdir=./terraform apply -auto-approve

          # scp secrets to prod.env
          echo -e "\n--> Copying secrets to swarm leader\n"
          scp \
              -r \
              -i ssh_key/terraform \
              ./secrets root@$(terraform -chdir=./terraform output -raw minitwit-swarm-leader-ip-address):/root

          # deploy the stack to the cluster
          echo -e "\n--> Deploying the Minitwit stack to the cluster\n"
          scp \
              -r \
              -i ssh_key/terraform \
              ./compose root@$(terraform -chdir=./terraform output -raw minitwit-swarm-leader-ip-address):/root
          ssh \
              -o 'StrictHostKeyChecking no' \
              root@$(terraform -chdir=./terraform output -raw minitwit-swarm-leader-ip-address) \
              -i ssh_key/terraform \
              'docker stack deploy minitwit -c compose/compose.prod.yaml'

          echo -e "\n--> Done bootstrapping Minitwit"
          echo -e "--> Site will be avilable @ http://$(terraform -chdir=./terraform output -raw public_ip)"
          echo -e "--> ssh to swarm leader with 'ssh root@$(terraform -chdir=./terraform output -raw minitwit-swarm-leader-ip-address) -i ssh_key/terraform'"
          echo -e "--> To remove the infrastructure run: terraform destroy -auto-approve"
